# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-08-30 20:51
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import feincms3.cleanse
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('draft', 'Draft'), ('paused', 'Paused'), ('active', 'Active')])),
                ('name', models.TextField()),
                ('from_name', models.TextField()),
                ('from_email', models.TextField()),
                ('start_now', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Click',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('lastchanged', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('drip', 'Drip'), ('broadcast', 'Broadcast')], default='drip', help_text="'Broadcast' drips will only send one time, and WILL SEND TO ALL USERS, whether or not they're on a mailing list or sequence delay fields. Use the queryset tofilter/exclude which users will receive broadcast emails. Broadcast completely ignores sequence, parent, mailing list fields.Choose 'Drip' for normal drips.", max_length=10)),
                ('delay', models.CharField(default=1, help_text="Delay in how many days from when the subscriber started their current sequence. 0 is same day (immediate), 1 is one day old before sending. If a parent is selected, delays off of when the parent drip was sent to the user instead.Use 1 (or more) if a parent is selected, otherwise they'll get 2 emails in 1 day.", max_length=255, verbose_name='Day Delay')),
                ('name', models.CharField(help_text='A unique name for this drip.', max_length=255, verbose_name='Drip Name')),
                ('send_after', models.DateTimeField(blank=True, null=True)),
                ('broadcast_sent', models.BooleanField(default=False, help_text="Only used for 'Broadcast' type emails.")),
                ('enabled', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, help_text='This is only seen by staff.', max_length=255, null=True)),
                ('from_email', models.EmailField(blank=True, help_text='Set a custom from email.', max_length=254, null=True)),
                ('from_email_name', models.CharField(blank=True, help_text='Set a name for a custom from email.', max_length=150, null=True)),
                ('message_class', models.CharField(blank=True, default='default', max_length=120)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('campaign', models.ForeignKey(blank=True, help_text="IMPORTANT: Choose a sequence even if a parent is selected. If no sequence is selected, it's assumed to be a broadcast email and will ONLY filter off the queryset you select below. If left empty, it grabs ALL users by default, even those who are not on a mailing list.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='drips', to='squeezemail.Campaign')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='squeezemail.Drip')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DripSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=150)),
                ('enabled', models.BooleanField(default=True)),
                ('drip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='squeezemail.Drip')),
            ],
        ),
        migrations.CreateModel(
            name='Open',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuerySetRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('lastchanged', models.DateTimeField(auto_now=True)),
                ('method_type', models.CharField(choices=[('filter', 'Filter'), ('exclude', 'Exclude')], default='filter', max_length=12)),
                ('field_name', models.CharField(max_length=128, verbose_name='Field name of Subscriber')),
                ('lookup_type', models.CharField(choices=[('exact', 'exactly'), ('iexact', 'exactly (case insensitive)'), ('contains', 'contains'), ('icontains', 'contains (case insensitive)'), ('regex', 'regex'), ('iregex', 'contains (case insensitive)'), ('gt', 'greater than'), ('gte', 'greater than or equal to'), ('lt', 'less than'), ('lte', 'less than or equal to'), ('startswith', 'starts with'), ('endswith', 'starts with'), ('istartswith', 'ends with (case insensitive)'), ('iendswith', 'ends with (case insensitive)')], default='exact', max_length=12)),
                ('field_value', models.CharField(help_text='Can be anything from a number, to a string. Or, do `now-7 days` or `today+3 days` for fancy timedelta.', max_length=255)),
                ('drip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queryset_rules', to='squeezemail.Drip')),
            ],
        ),
        migrations.CreateModel(
            name='RichText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', feincms3.cleanse.CleansedRichTextField(verbose_name='text')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='squeezemail_richtext_set', to='squeezemail.Drip')),
            ],
            options={
                'verbose_name': 'rich text',
                'abstract': False,
                'verbose_name_plural': 'rich texts',
            },
        ),
        migrations.CreateModel(
            name='SendDrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('sent', models.BooleanField(default=False)),
                ('drip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_drips', to='squeezemail.Drip')),
            ],
        ),
        migrations.CreateModel(
            name='Spam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('sentdrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='squeezemail.SendDrip')),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='squeeze_subscriber', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribe_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Subscribe Date')),
                ('status', models.TextField(choices=[('draft', 'Draft'), ('paused', 'Paused'), ('active', 'Active')])),
                ('is_complete', models.BooleanField(default=False)),
                ('lap', models.IntegerField(default=1)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='squeezemail.Campaign')),
                ('last_send_drip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='squeezemail.SendDrip')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='squeezemail.Subscriber')),
            ],
        ),
        migrations.CreateModel(
            name='Unsubscribe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('sentdrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='squeezemail.SendDrip')),
            ],
        ),
        migrations.AddField(
            model_name='senddrip',
            name='subscriber',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_drips', to='squeezemail.Subscriber'),
        ),
        migrations.AddField(
            model_name='open',
            name='sentdrip',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='squeezemail.SendDrip'),
        ),
        migrations.AddField(
            model_name='click',
            name='sentdrip',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='squeezemail.SendDrip'),
        ),
        migrations.AlterUniqueTogether(
            name='senddrip',
            unique_together=set([('drip', 'subscriber')]),
        ),
    ]
