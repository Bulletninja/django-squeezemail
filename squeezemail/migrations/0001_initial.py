# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-10-01 19:35
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import feincms3.cleanse
import gfklookupwidget.fields
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=75, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Delay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.DurationField(default=datetime.timedelta(1), help_text="The preferred format for durations in Django is '%d %H:%M:%S.%f (e.g. 3 00:40:00 for 3 day, 40 minute delay)'")),
            ],
        ),
        migrations.CreateModel(
            name='Drip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A unique name for this drip.', max_length=255, unique=True, verbose_name='Drip Name')),
                ('enabled', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, help_text='This is only seen by staff.', max_length=255, null=True)),
                ('from_email', models.EmailField(blank=True, help_text='Set a custom from email.', max_length=254, null=True)),
                ('from_email_name', models.CharField(blank=True, help_text='Set a name for a custom from email.', max_length=150, null=True)),
                ('message_class', models.CharField(blank=True, default='default', max_length=120)),
                ('send_after', models.DateTimeField(blank=True, help_text="Only used for 'Broadcast' type emails. (not yet implemented)", null=True)),
                ('broadcast_sent', models.BooleanField(default=False, help_text="Only used for 'Broadcast' type emails.")),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('lastchanged', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DripSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=150)),
                ('enabled', models.BooleanField(default=True)),
                ('drip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='squeezemail.Drip')),
            ],
        ),
        migrations.CreateModel(
            name='EmailActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('open', 'Opened'), ('click', 'Clicked'), ('spam', 'Reported Spam')], max_length=75)),
                ('check_last', models.IntegerField(default=1, help_text='How many previously sent drips/emails to check')),
            ],
        ),
        migrations.CreateModel(
            name='Funnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
            ],
        ),
        migrations.CreateModel(
            name='FunnelSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('funnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='squeezemail.Funnel')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', versatileimagefield.fields.VersatileImageField(height_field='height', upload_to='images/%Y/%m', verbose_name='image', width_field='width')),
                ('width', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='image width')),
                ('height', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='image height')),
                ('ppoi', versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20, verbose_name='primary point of interest')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0)),
                ('url', models.TextField(blank=True, max_length=500, null=True)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='squeezemail_image_set', to='squeezemail.Drip')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Modify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modify_type', models.CharField(choices=[('add', 'Add'), ('move', 'Move'), ('remove', 'Remove')], max_length=75)),
                ('object_id', gfklookupwidget.fields.GfkLookupField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'Modifications',
                'verbose_name': 'Modify',
            },
        ),
        migrations.CreateModel(
            name='QuerySetRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('lastchanged', models.DateTimeField(auto_now=True)),
                ('object_id', gfklookupwidget.fields.GfkLookupField()),
                ('method_type', models.CharField(choices=[('filter', 'Filter'), ('exclude', 'Exclude')], default='filter', max_length=12)),
                ('field_name', models.CharField(max_length=128, verbose_name='Field name of Subscription')),
                ('lookup_type', models.CharField(choices=[('exact', 'exactly'), ('iexact', 'exactly (case insensitive)'), ('contains', 'contains'), ('icontains', 'contains (case insensitive)'), ('regex', 'regex'), ('iregex', 'contains (case insensitive)'), ('gt', 'greater than'), ('gte', 'greater than or equal to'), ('lt', 'less than'), ('lte', 'less than or equal to'), ('startswith', 'starts with'), ('endswith', 'starts with'), ('istartswith', 'ends with (case insensitive)'), ('iendswith', 'ends with (case insensitive)')], default='exact', max_length=12)),
                ('field_value', models.CharField(help_text='Can be anything from a number, to a string. Or, do `now-7 days` or `today+3 days` for fancy timedelta.', max_length=255)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='RichText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', feincms3.cleanse.CleansedRichTextField(verbose_name='text')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='squeezemail_richtext_set', to='squeezemail.Drip')),
            ],
            options={
                'verbose_name': 'rich text',
                'verbose_name_plural': 'rich texts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SendDrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('sent', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=75, null=True)),
                ('object_id', gfklookupwidget.fields.GfkLookupField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text="If not active, subscribers will still be allowed to move to this step, but this step won't run until it's active. Consider this a good way to 'hold' subscribers on this step. Note: Step children won't run either.", verbose_name='Active')),
                ('position', models.PositiveIntegerField(db_index=True, default=0, editable=False)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='squeezemail.Step')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('step_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Last Step Activity Timestamp')),
                ('step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='squeezemail.Step')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='squeeze_subscriber', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Click',
            fields=[
                ('senddrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='squeezemail.SendDrip')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Open',
            fields=[
                ('senddrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='squeezemail.SendDrip')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spam',
            fields=[
                ('senddrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='squeezemail.SendDrip')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unsubscribe',
            fields=[
                ('senddrip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='squeezemail.SendDrip')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='senddrip',
            name='drip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_drips', to='squeezemail.Drip'),
        ),
        migrations.AddField(
            model_name='senddrip',
            name='subscriber',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_drips', to='squeezemail.Subscriber'),
        ),
        migrations.AddField(
            model_name='funnelsubscription',
            name='subscriber',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funnel_subscriptions', to='squeezemail.Subscriber'),
        ),
        migrations.AddField(
            model_name='funnel',
            name='entry_step',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funnels', to='squeezemail.Step'),
        ),
        migrations.AddField(
            model_name='funnel',
            name='subscribers',
            field=models.ManyToManyField(related_name='funnels', through='squeezemail.FunnelSubscription', to='squeezemail.Subscriber'),
        ),
        migrations.AddField(
            model_name='emailactivity',
            name='on_false',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='step_email_activity_on_true+', to='squeezemail.Step'),
        ),
        migrations.AddField(
            model_name='emailactivity',
            name='on_true',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='step_email_activity_on_true+', to='squeezemail.Step'),
        ),
        migrations.AddField(
            model_name='decision',
            name='on_false',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='step_decision_on_false+', to='squeezemail.Step'),
        ),
        migrations.AddField(
            model_name='decision',
            name='on_true',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='step_decision_on_true+', to='squeezemail.Step'),
        ),
        migrations.AlterUniqueTogether(
            name='step',
            unique_together=set([('id', 'parent')]),
        ),
        migrations.AlterUniqueTogether(
            name='senddrip',
            unique_together=set([('drip', 'subscriber')]),
        ),
        migrations.AlterUniqueTogether(
            name='funnelsubscription',
            unique_together=set([('funnel', 'subscriber')]),
        ),
    ]
